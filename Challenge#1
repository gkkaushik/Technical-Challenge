Considering 3 tier environment:
1) Website - Will serve as a frontend to provide service to its various customers.
2) GKE - Will use for the app-tier.
3) Cloud Mysql- Will use for data tier.

 Use external ingress  for Inbound internet traffic
 Use https-LB for traffic load balancing and use the CDN 
 Use Regional GKE cluster for application high availibility.
 Use Multizonal node pools to distribute the load across multiple zones.
 For cloudsql HA use primary and secondary instance , Point in time recovery as well.
 
 
terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "3.71.0"
    }
  }
}

provider "google" {
  project = var.project
  region  = var.region
}

# Enable Compute Engine/Container APIs
resource "google_project_service" "project" {
  project = var.project

  for_each = toset([
    "compute.googleapis.com",
    "container.googleapis.com"
  ])

  service            = each.key
  disable_on_destroy = false
}

# VPC
resource "google_compute_network" "vpc" {
  name                    = "${var.project}ovvpc"
  auto_create_subnetworks = "false"
  depends_on = [
    google_project_service.project
  ]
}

# Subnet
resource "google_compute_subnetwork" "subnet" {
  name          = "${var.project}ovsubnet"
  region        = var.region
  network       = google_compute_network.vpc.name
  ip_cidr_range = "10.10.10.0/24"

  secondary_ip_range {
    range_name    = "services-range"
    ip_cidr_range = "10.10.11.0/24"
  }

  secondary_ip_range {
    range_name    = "pods-range"
    ip_cidr_range = "10.10.16.0/21"
}
}



esource "google_container_cluster" "primary" {
  name                     = "${var.project}-gke"
  location                 = var.region
  remove_default_node_pool = true
  initial_node_count       = 1
  networking_mode          = "VPC_NATIVE"

  network    = google_compute_network.vpc.name
  subnetwork = google_compute_subnetwork.subnet.name

  private_cluster_config {
    enable_private_nodes    = true
    enable_private_endpoint = false
    master_ipv4_cidr_block  = "10.10.0.0/28"
  }

  ip_allocation_policy {
    cluster_secondary_range_name  = "pods-range"
    services_secondary_range_name = "services-range"
  }
}

# Node Pool
resource "google_container_node_pool" "primary_nodes" {
  name       = "${google_container_cluster.primary.name}-pool"
  location   = var.region
  cluster    = google_container_cluster.primary.name
  node_count = var.gke_num_nodes

  node_config {
    oauth_scopes = [
      "https://www.googleapis.com/auth/logging.write",
      "https://www.googleapis.com/auth/monitoring",
    ]

    labels = {
      env = var.project
    }

    machine_type = "n1-standard-1"
    tags         = ["gke-node"]
    metadata = {
      disable-legacy-endpoints = "true"
    }
  }
}

variable "project" {
  type        = string
  description = "GCP project id"
}

variable "region" {
  description = "GCP region to deploy resources in"
}

variable "zone" {
  description = "GCP zone to deploy KMS instance in"
}

variable "gke_num_nodes" {
  default     = 2
  description = "Number of Kubernetes nodes to deploy per zone"
}

variable "kms_image" {
  description = "Docker image to be run on the KMS instance"
}



#############CloudSQL##########

resource "random_id" "db_name_suffix" {
  count       = var.random_suffix ? 1 : 0
  byte_length = 4
}

resource "google_sql_database_instance" "instance" {
  # provider = google-beta # Appears to work with out beta, if next destory/create cycle works remove.
  project = var.project_id
  region  = var.region
  # Depends on is required, already indirectly achieved by passing it into this module
  # but added here for clarity.
  # depends_on = [var.private_service_connection]
  name                = var.random_suffix ? "${var.env_name}-cmy-${random_id.db_name_suffix[0].hex}" : "${var.env_name}-cmy"
  database_version    = var.database_version
  deletion_protection = var.deletion_protection

  settings {
    tier              = var.tier
    availability_type = var.availability_type
    ip_configuration {
      ipv4_enabled    = false
      private_network = var.vpc_id
      require_ssl     = true
    }

   
    backup_configuration {
      binary_log_enabled = "true"
      enabled            = "true"
    }

    backup_configuration {
      enabled            = true
      start_time         = var.backup_start_time
      location           = var.backup_location
      binary_log_enabled = var.availability_type == "REGIONAL" ? true : false # Binary logs is a requirement for regional instances
      backup_retention_settings {
        retained_backups = var.retained_backups
      }
    }

    maintenance_window { # Windows are 1 hour
      day          = 7
      hour         = 0
      update_track = "stable"
    }

  }
}


variable "project_id" {
  description = "GCP project IP"
}
variable "vpc_id" {}

variable "region" {
  description = "GCP region"
}
variable "env_name" {
  description = "Name of enviroment (DEV/SIT/UAT/PROD), will be used in naming instance."
}
variable "database_version" {
  description = "Version of MySQL to run"
  default     = "MYSQL_5_6"
  validation {
    condition     = substr(var.database_version, 0, 5) == "MYSQL"
    error_message = "The version must begin with the name MYSQL, this module does not support other versions."
  }
}
variable "tier" {
  default = "db-g1-small"
}
variable "availability_type" {
  default = "REGIONAL" # HA or "ZONAL" Non HA
}
variable "deletion_protection" {
  description = "Instance can not be deleted unless false, used to prevent acidental deletions."
  default     = false
}
# variable "private_service_connection" {
#   description = "Reference to the private service connection to enforce dependancy."
# }
variable "random_suffix" {
  description = "Whether to add a random suffix to database name to prevent clashes. Useful for testing as you can't reuse the name of the deleted instance until one week from the deletion date."
  default     = false
}

variable "backup_location" {
  description = "Location backups will be placed in. If region is not allowed y org policy this will cause errors."
  default     = "europe-west2"
}
variable "backup_start_time" {
  description = "Start time for automatic backups to start, defaults to midnight."
  default     = "00:00"
}
variable "retained_backups" {
  description = "Number of automatic backups to keep, defaults to 14."
  default     = 14
}




